@model OECS.Models.ProductModels.ProductColorModel
@using OECS.Models;
@using (Ajax.BeginForm("EditProductColor", "Product", new AjaxOptions { HttpMethod = "POST", OnSuccess = "Success(data)" }, new { enctype = "multipart/form-data" }))
{
    <div class="modal-header">
        <h5 class="modal-title">Edit Color</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(i => i.ProductID)
        @Html.HiddenFor(i => i.IconID)
        @Html.HiddenFor(i => i.ProductDetailID)
        @{
            oecsEntities dbContext = new oecsEntities();
            int c = 1;
            var icon = dbContext.ProductImage
                                .Where(i => i.ProductDetail.ProductID == Model.ProductID)
                                .Select(i => new
                                {
                                    i.Image.IconID,
                                    i.ProductDetail.ColorID,
                                    i.Image.Icon.icon1
                                }).Distinct().ToList();

            var size = dbContext.Size
                                .SelectMany(s => dbContext.DisplaySize.Where(ds => s.SideID == ds.ProductImage.ProductDetail.SizeID && ds.ProductImage.ProductDetail.ProductID == Model.ProductID && ds.ProductImage.ProductDetail.ColorID == Model.ColorID && ds.ProductImage.Image.IconID == Model.IconID).DefaultIfEmpty(), (s, ds) => new
                                {
                                    s.SideID,
                                    s.size1,
                                    ds.ProductImage.ProductDetail.SizeID
                                }).ToList();
        }
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th class="text-center">
                        <label>
                            @Html.TextBoxFor(i => i.IconFile, new { type = "file", @class = "d-none" })
                            <img class="img-display img-fluid z-depth-1 rounded-circle img-thumbnail" src="@Model.IconPath" id="imgEditIcon" />
                        </label>
                    </th>
                    <th>1</th>
                    <th>2</th>
                    <th>3</th>
                    <th>4</th>
                    <th>5</th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>Images</td>
                    @foreach (var path in Model.ProductImage.Take(5))
                    {
                        <td class="text-center">
                            <label>
                                @Html.Hidden("txtHidImgID-" + @c, path.ImageID, new { @class = "form-control txtHidImgID" })
                                @Html.TextBoxFor(i => i.Files, new { type = "file", @class = "file-edit-img-input d-none", @id = "fileEdit-" + c })
                                <img class="img-display" src="@path.Image.path" id="imgEdit-@c" />
                            </label>
                        </td>
                        { c++; }
                    }
                </tr>
                <tr>
                    <td>Sizes</td>
                    <td class="text-center" colspan="5">
                        <div class="container-fluid">
                            <div class="row">
                                @foreach (var s in size.Distinct())
                                {
                                    string sizeCount = s.SizeID != null ? "(" + size.Where(ds => ds.SideID == s.SideID && s.SizeID != null).Count().ToString() + ")" : "";
                                    <div class="custom-control custom-checkbox">
                                        @if (s.SizeID != null)
                                        {
                                            @Html.CheckBox(Convert.ToString(s.SideID), new { @class = "custom-control-input", @id = "checkbox-edit-" + s.SideID, @checked = "checked" })
                                        }
                                        else
                                        {
                                            @Html.CheckBox(Convert.ToString(s.SideID), new { @class = "custom-control-input", @id = "checkbox-edit-" + s.SideID })
                                        }
                                        <label class="custom-control-label" for="checkbox-edit-@s.SideID">@s.size1</label>
                                        @if (size.Where(ds => ds.SideID == s.SideID && s.SizeID != null).Count() > 0)
                                        {
                                            <a class="size-popover" sizeID="@s.SideID" data-toggle="popover" data-template="<div class='popover'><div class='arrow'></div><h3 class='popover-header'></h3><div class='popover-body'></div><div class='popover-footer'></div></div>">@sizeCount</a>
                                            <div class="d-none" id="size-popover-@s.SideID" role="tooltip">
                                                <div class="col-sm-12">
                                                    @sizeCount
                                                </div>
                                            </div>
                                        }

                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>Colours</td>
                    <td class="text-center" colspan="5">
                        <div class="container-fluid">
                            <div class="row">
                                @Html.HiddenFor(i => i.ColorID)  @* use to mark default color *@
                                @foreach (var color in Model.ColorList)
                                {
                                    <div class="col-xs-3 color-edit-wrapper">
                                        <span class="badge badge-color edit-color" colorID="@color.Value" style="background-color: @color.Text"><strong class="d-none">1</strong></span>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="container">
            @foreach (var i in icon)
            {
                <a onclick="EditColorImages(@Model.ProductID, parseInt(@i.ColorID), parseInt(@i.IconID))">
                    <img src="@i.icon1" class="img-fluid z-depth-1 rounded-circle img-thumbnail icon" id="edit-icon-@i.IconID" />
                </a>
            }
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary d-none" type="submit" id="BtnConfirmSaveEditProductColor"></button>
        <button class="btn btn-primary" type="button" id="BtnSaveEditProductColor">Save</button>
        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
    </div>
}